generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime?
  protusId      String?           @unique
  updatedAt     DateTime?
  onBoarded     Boolean           @default(false)
  USNEmail      String?
  leaderboard   Boolean?
  accounts      Account[]
  sessions      Session[]
  history       ExerciseHistory[]
  preferences   UserPreference[]
  todo          ToDo[]
}

model UserPreference {
  id                 String         @id @default(cuid())
  userId             String
  selectedComponents SelectedEnum[] @default([])
  leaderboard        Boolean        @default(false)
  createdAt          DateTime       @default(now())
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExerciseHistory {
  historyId String @id @default(cuid())

  visitedAt   DateTime
  completedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  activityResourceId String
  ActivityResource   ActivityResource @relation(fields: [activityResourceId], references: [id], onDelete: Cascade)

  @@unique([userId, activityResourceId], name: "userExerciseHistoryOnActivityResource")
}

model ToDo {
  todoId String @id @default(cuid())

  dueDate     DateTime
  completed   Boolean
  name        String
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  courseName String
  id         String   @id @default(cuid())
  modules    Module[]
}

model ActivityResource {
  type        type
  name        String
  url         String
  moduleId    String
  id          String            @id @default(cuid())
  relation    Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userHistory ExerciseHistory[]
}

model Module {
  moduleName       String
  order            Int
  id               String             @id @default(cuid())
  courseId         String
  ActivityResource ActivityResource[]
  relation         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description      String
}

enum type {
  EXAMPLE
  CHALLENGE
  CODING
}

enum SelectedEnum {
  HISTORYGRAPH
  STATS
  LEADERBOARD
  EXERCISEHISTORY
  TODO
}
