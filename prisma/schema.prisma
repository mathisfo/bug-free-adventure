// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id         Int      @id @default(autoincrement())
    courseName String
    modules    Module[]
}

model ActivityResource {
    id       Int    @id @default(autoincrement())
    type     type
    name     String
    url      String
    relation Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    moduleId Int
}

model Module {
    id               Int                @id @default(autoincrement())
    moduleName       String
    order            Int
    ActivityResource ActivityResource[]
    relation         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId         Int
}

enum type {
    EXAMPLE
    CHALLENGE
    CODING
}

model User1 {
    id    Int    @id @default(autoincrement())
    email String @unique
    name  String
    posts Post[]
}

model Post {
    id        Int     @id @default(autoincrement())
    title     String
    content   String
    published Boolean
    user      User1   @relation(fields: [userId], references: [id])
    userId    Int
}
