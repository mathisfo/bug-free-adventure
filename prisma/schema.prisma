generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  protusId String? @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt DateTime?
  updatedAt DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  courseName String
  id         Int      @id @default(autoincrement())
  modules    Module[]
}

model ActivityResource {
  type       type
  name       String
  url        String
  id         Int    @id @default(autoincrement())
  moduleId   Int
  activityId String @unique
  relation   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Module {
  moduleName       String
  order            Int
  id               Int                @id @default(autoincrement())
  courseId         Int
  relation         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  ActivityResource ActivityResource[]
}

enum type {
  EXAMPLE
  CHALLENGE
  CODING
}
